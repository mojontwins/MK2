' Librarian.bas
' Copyleft 2012, 2014 The Mojon Twins
#include "file.bi"

Declare Function MyReplace (subject As String, find As String, replace As String) As String
Declare Function procruste (subject As String, n As Integer) As String
Declare Function preload (page As Integer) As Integer

Dim as Integer f1, f2, fl
Dim Shared mempointer as Integer
Dim Shared currentMem as Integer
Dim ramPage as Integer
Dim Shared ramPages (3) as Integer
Dim Shared myBin (16384) as uByte
Dim Shared currentBin (16384) as uByte
Dim linea as String
Dim d as uByte
Dim i as Integer
Dim thisOffset as Integer
Dim resId as Integer
Dim comma as String
Dim myDefines (255) as String

ramPages (0) = 3
ramPages (1) = 4
ramPages (2) = 6
ramPages (3) = 7

ramPage = 0
mempointer = 0
resId = 0

Print "THE LIBRARIAN"
Print
Open "list.txt" for binary as #1
If Lof (1) = 0 Then Close #1: Kill "list.txt": Print "list.txt does not exist. Exitting and closing the door loudly.": System
Close #1


Print "Processing list.txt"

f1 = FreeFile
Open "list.txt" For Input as f1
fl = FreeFile
Open "librarian.h" For Output as fl

Print #fl, "// librarian.h"
Print #fl, "// Generated by The Librarian"
Print #fl, "// Copyleft 2012 The Mojon Twins"
Print #fl, " "
Print #fl, "typedef struct {"
Print #fl, "   unsigned char ramPage;"
Print #fl, "   unsigned int ramOffset;"
Print #fl, "} RESOURCE;"
Print #fl, " "
Print #fl, "RESOURCE resources [] = {"

' Preload!
mempointer = preload (ramPage)

While Not Eof (f1)
	Line Input #f1, linea
	linea = Trim (linea)
	
	f2 = FreeFile
	currentMem = 0
	Open linea For Binary as #f2
	While Not Eof (f2)
		Get #f2, , d
		currentBin (currentMem) = d
		currentMem = currentMem + 1
	Wend
	Close f2

	' Append or adding a new one?
	While currentMem + mempointer > 16384 
		' new
		' First write binary
		f2 = FreeFile
		Print "Writing RAM" & Trim (Str (ramPages (ramPage))) & ".bin"
		Kill "RAM" & Trim (Str (ramPages (ramPage))) & ".bin"
		Open "RAM" & Trim (Str (ramPages (ramPage))) & ".bin" For Binary as #f2
		For i = 0 To mempointer - 1
			Put #f2, , myBin (i)
		Next i
		Close f2
		' Move to new RAM page
		ramPage = ramPage + 1
		mempointer = preload (ramPage)
	Wend

	Print " + File " & linea & "		" & currentMem
	
	thisOffset = mempointer
	
	' add
	For i = 0 To currentMem - 1
		myBin (mempointer) = currentBin (i)
		mempointer = mempointer + 1
	Next i
	
	' Write resource to librarian .h
	if eof(f1) then comma = " " else comma = ","
	
	Print #fl, "   {" & Trim (Str (ramPages (ramPage))) & ", " & Trim (Str (49152 + thisOffset)) & "}" & comma & "   // " & Trim (Str (resId)) & ": " & linea
	
	myDefines (resId) = "#define " + Procruste (Ucase (MyReplace (linea, ".", "_")), 20) + "	" + Trim (Str (resId))
	
	resId = resId + 1
Wend

' Final
If mempointer <> 0 Then
	f2 = FreeFile
	Print "Writing RAM" & Trim (Str (ramPages (ramPage))) & ".bin"
	Kill "RAM" & Trim (Str (ramPages (ramPage))) & ".bin"
	Open "RAM" & Trim (Str (ramPages (ramPage))) & ".bin" For Binary as #f2
	For i = 0 To mempointer - 1
		Put #f2, , myBin (i)
	Next i
	Close f2	
End If

ramPage = ramPage + 1

While ramPage < 4
	mempointer = preload (ramPage)
	f2 = FreeFile
	Print "Writing RAM" & Trim (Str (ramPages (ramPage))) & ".bin"
	Kill "RAM" & Trim (Str (ramPages (ramPage))) & ".bin"
	Open "RAM" & Trim (Str (ramPages (ramPage))) & ".bin" For Binary as #f2
	For i = 0 To mempointer - 1
		Put #f2, , myBin (i)
	Next i
	Close f2	
	ramPage = ramPage + 1
Wend

Print #fl, "};"
Print #fl, " "

Print #fl, "void get_resource (unsigned char res, unsigned int dest) {"
Print #fl, "   unpack_RAMn (resources [res].ramPage, resources [res].ramOffset, dest);"
Print #fl, "}"
Print #fl, " "

Print #fl, "// Defines"
For i = 0 To resId - 1
	Print #fl, myDefines (i)
Next i

Close f1, fl 

Function MyReplace (subject As String, find As String, replace As String) As String
	Dim As Integer it
	For it = 1 To Len (subject)
		If Mid (subject, it, 1) = find Then Mid (subject, it, 1) = replace
	Next it
	Return subject
End Function

Function procruste (subject As String, n As Integer) As String
	If Len (subject) < n Then
		subject = subject + Space (n - Len (subject))
	End If
	Return subject
End Function

Function preload (page As Integer) As Integer
	Dim fileSize As Integer
	Dim d as uByte
	Dim f3 As Integer
	
	' If there's a preloadX.bin, add it automaticly
	fileSize = 0
	Print "Fetching preload" & Trim (Str (ramPages (page))) & "... ";
	If FileExists ("preload" + Trim (Str (ramPages (page))) + ".bin") Then
		f3 = Freefile
		Open "preload" + Trim (Str (ramPages (page))) + ".bin" for binary as #f3
		While Not Eof (f3)
			Get #f3, , d
			myBin (fileSize) = d
			fileSize = fileSize + 1
		Wend
		Close f3
		Print "Found (" & fileSize & " bytes added)."
	Else 
		Print "Not found."		
	End If
	return fileSize
End Function
